package main

//Go 语言中的数组是一种 值类型（不像 C/C++ 中是指向首元素的指针），所以可以通过 new() 来创建： var arr1 = new([5]int)。
//那么这种方式和 var arr2 [5]int 的区别是什么呢？arr1 的类型是 *[5]int，而 arr2 的类型是 [5]int。
//这样的结果就是当把一个数组赋值给另一个时，需要再做一次数组内存的拷贝操作。
//arr2 := *arr1
//arr2[2] = 100

//把一个大数组传递给函数会消耗很多内存。有两种方法可以避免这种情况：
//
//传递数组的指针
//使用数组的切片

//切片
//如果 s2 是一个切片，你可以将 s2 向后移动一位 s2 = s2[1:]，但是末尾没有移动。
//切片只能向后移动，s2 = s2[-1:] 会导致编译错误。切片不能被重新分片以获取数组的前一个元素。
//绝对不要用指针指向切片。切片本身已经是一个引用类型，所以它本身就是一个指针！！
//数组创建切片
//var arr1 [6]int
//var slice1 []int = arr1[2:5]
//make（）创建切片
//var slice1 []type = make([]type, len)<==>slice1 := make([]type, len)<==>s2 := make([]int, 10)

//slice1 := make([]type, start_length, capacity)
//其中 start_length 作为切片初始长度而 capacity 作为相关数组的长度。
//
//这么做的好处是我们的切片在达到容量上限后可以扩容。改变切片长度的过程称之为切片重组 reslicing，做法如下：slice1 = slice1[0:end]，其中 end 是新的末尾索引（即长度）。
//
//将切片扩展 1 位可以这么做：
//
//sl = sl[0:len(sl)+1]
